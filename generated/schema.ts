// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Vault must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get token0Name(): string {
    let value = this.get("token0Name");
    return value!.toString();
  }

  set token0Name(value: string) {
    this.set("token0Name", Value.fromString(value));
  }

  get token1Name(): string {
    let value = this.get("token1Name");
    return value!.toString();
  }

  set token1Name(value: string) {
    this.set("token1Name", Value.fromString(value));
  }

  get isPassive(): boolean {
    let value = this.get("isPassive");
    return value!.toBoolean();
  }

  set isPassive(value: boolean) {
    this.set("isPassive", Value.fromBoolean(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value!.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get manager(): Bytes {
    let value = this.get("manager");
    return value!.toBytes();
  }

  set manager(value: Bytes) {
    this.set("manager", Value.fromBytes(value));
  }

  get managingFee(): BigInt {
    let value = this.get("managingFee");
    return value!.toBigInt();
  }

  set managingFee(value: BigInt) {
    this.set("managingFee", Value.fromBigInt(value));
  }

  get performanceFee(): BigInt {
    let value = this.get("performanceFee");
    return value!.toBigInt();
  }

  set performanceFee(value: BigInt) {
    this.set("performanceFee", Value.fromBigInt(value));
  }

  get managerBalance(): BigInt {
    let value = this.get("managerBalance");
    return value!.toBigInt();
  }

  set managerBalance(value: BigInt) {
    this.set("managerBalance", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get totalFeesEarned0(): BigInt {
    let value = this.get("totalFeesEarned0");
    return value!.toBigInt();
  }

  set totalFeesEarned0(value: BigInt) {
    this.set("totalFeesEarned0", Value.fromBigInt(value));
  }

  get totalFeesEarned1(): BigInt {
    let value = this.get("totalFeesEarned1");
    return value!.toBigInt();
  }

  set totalFeesEarned1(value: BigInt) {
    this.set("totalFeesEarned1", Value.fromBigInt(value));
  }

  get firstMintAtBlock(): BigInt {
    let value = this.get("firstMintAtBlock");
    return value!.toBigInt();
  }

  set firstMintAtBlock(value: BigInt) {
    this.set("firstMintAtBlock", Value.fromBigInt(value));
  }

  get inThePosition(): boolean {
    let value = this.get("inThePosition");
    return value!.toBoolean();
  }

  set inThePosition(value: boolean) {
    this.set("inThePosition", Value.fromBoolean(value));
  }

  get currentPosition(): string | null {
    let value = this.get("currentPosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentPosition(value: string | null) {
    if (!value) {
      this.unset("currentPosition");
    } else {
      this.set("currentPosition", Value.fromString(<string>value));
    }
  }

  get currentPositionIdInVault(): Bytes | null {
    let value = this.get("currentPositionIdInVault");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set currentPositionIdInVault(value: Bytes | null) {
    if (!value) {
      this.unset("currentPositionIdInVault");
    } else {
      this.set("currentPositionIdInVault", Value.fromBytes(<Bytes>value));
    }
  }

  get positionCount(): BigInt {
    let value = this.get("positionCount");
    return value!.toBigInt();
  }

  set positionCount(value: BigInt) {
    this.set("positionCount", Value.fromBigInt(value));
  }

  get feeEarnedEventCount(): BigInt {
    let value = this.get("feeEarnedEventCount");
    return value!.toBigInt();
  }

  set feeEarnedEventCount(value: BigInt) {
    this.set("feeEarnedEventCount", Value.fromBigInt(value));
  }

  get collateralSuppliedCount(): BigInt {
    let value = this.get("collateralSuppliedCount");
    return value!.toBigInt();
  }

  set collateralSuppliedCount(value: BigInt) {
    this.set("collateralSuppliedCount", Value.fromBigInt(value));
  }

  get collateralWithdrawnCount(): BigInt {
    let value = this.get("collateralWithdrawnCount");
    return value!.toBigInt();
  }

  set collateralWithdrawnCount(value: BigInt) {
    this.set("collateralWithdrawnCount", Value.fromBigInt(value));
  }

  get ghoMintedCount(): BigInt {
    let value = this.get("ghoMintedCount");
    return value!.toBigInt();
  }

  set ghoMintedCount(value: BigInt) {
    this.set("ghoMintedCount", Value.fromBigInt(value));
  }

  get ghoBurnedCount(): BigInt {
    let value = this.get("ghoBurnedCount");
    return value!.toBigInt();
  }

  set ghoBurnedCount(value: BigInt) {
    this.set("ghoBurnedCount", Value.fromBigInt(value));
  }

  get poolRepegdCount(): BigInt {
    let value = this.get("poolRepegdCount");
    return value!.toBigInt();
  }

  set poolRepegdCount(value: BigInt) {
    this.set("poolRepegdCount", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get feeEarnedEvents(): Array<string> {
    let value = this.get("feeEarnedEvents");
    return value!.toStringArray();
  }

  set feeEarnedEvents(value: Array<string>) {
    this.set("feeEarnedEvents", Value.fromStringArray(value));
  }

  get collateralSupplies(): Array<string> {
    let value = this.get("collateralSupplies");
    return value!.toStringArray();
  }

  set collateralSupplies(value: Array<string>) {
    this.set("collateralSupplies", Value.fromStringArray(value));
  }

  get collateralWithdrawns(): Array<string> {
    let value = this.get("collateralWithdrawns");
    return value!.toStringArray();
  }

  set collateralWithdrawns(value: Array<string>) {
    this.set("collateralWithdrawns", Value.fromStringArray(value));
  }

  get ghoMints(): Array<string> {
    let value = this.get("ghoMints");
    return value!.toStringArray();
  }

  set ghoMints(value: Array<string>) {
    this.set("ghoMints", Value.fromStringArray(value));
  }

  get ghoBurns(): Array<string> {
    let value = this.get("ghoBurns");
    return value!.toStringArray();
  }

  set ghoBurns(value: Array<string>) {
    this.set("ghoBurns", Value.fromStringArray(value));
  }

  get poolRepegs(): Array<string> {
    let value = this.get("poolRepegs");
    return value!.toStringArray();
  }

  set poolRepegs(value: Array<string>) {
    this.set("poolRepegs", Value.fromStringArray(value));
  }

  get mints(): Array<Bytes> {
    let value = this.get("mints");
    return value!.toBytesArray();
  }

  set mints(value: Array<Bytes>) {
    this.set("mints", Value.fromBytesArray(value));
  }

  get burns(): Array<Bytes> {
    let value = this.get("burns");
    return value!.toBytesArray();
  }

  set burns(value: Array<Bytes>) {
    this.set("burns", Value.fromBytesArray(value));
  }

  get swaps(): Array<Bytes> {
    let value = this.get("swaps");
    return value!.toBytesArray();
  }

  set swaps(value: Array<Bytes>) {
    this.set("swaps", Value.fromBytesArray(value));
  }

  get lastUserIndex(): BigInt {
    let value = this.get("lastUserIndex");
    return value!.toBigInt();
  }

  set lastUserIndex(value: BigInt) {
    this.set("lastUserIndex", Value.fromBigInt(value));
  }

  get userBalances(): Array<Bytes> {
    let value = this.get("userBalances");
    return value!.toBytesArray();
  }

  set userBalances(value: Array<Bytes>) {
    this.set("userBalances", Value.fromBytesArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0Amount(): BigInt {
    let value = this.get("token0Amount");
    return value!.toBigInt();
  }

  set token0Amount(value: BigInt) {
    this.set("token0Amount", Value.fromBigInt(value));
  }

  get token1Amount(): BigInt {
    let value = this.get("token1Amount");
    return value!.toBigInt();
  }

  set token1Amount(value: BigInt) {
    this.set("token1Amount", Value.fromBigInt(value));
  }

  get token0Withdrawn(): BigInt {
    let value = this.get("token0Withdrawn");
    return value!.toBigInt();
  }

  set token0Withdrawn(value: BigInt) {
    this.set("token0Withdrawn", Value.fromBigInt(value));
  }

  get token1Withdrawn(): BigInt {
    let value = this.get("token1Withdrawn");
    return value!.toBigInt();
  }

  set token1Withdrawn(value: BigInt) {
    this.set("token1Withdrawn", Value.fromBigInt(value));
  }

  get priceSqrtAtOpening(): BigInt {
    let value = this.get("priceSqrtAtOpening");
    return value!.toBigInt();
  }

  set priceSqrtAtOpening(value: BigInt) {
    this.set("priceSqrtAtOpening", Value.fromBigInt(value));
  }

  get priceSqrtAtClosing(): BigInt {
    let value = this.get("priceSqrtAtClosing");
    return value!.toBigInt();
  }

  set priceSqrtAtClosing(value: BigInt) {
    this.set("priceSqrtAtClosing", Value.fromBigInt(value));
  }

  get lowerTick(): BigInt {
    let value = this.get("lowerTick");
    return value!.toBigInt();
  }

  set lowerTick(value: BigInt) {
    this.set("lowerTick", Value.fromBigInt(value));
  }

  get upperTick(): BigInt {
    let value = this.get("upperTick");
    return value!.toBigInt();
  }

  set upperTick(value: BigInt) {
    this.set("upperTick", Value.fromBigInt(value));
  }

  get feesEarned0(): BigInt {
    let value = this.get("feesEarned0");
    return value!.toBigInt();
  }

  set feesEarned0(value: BigInt) {
    this.set("feesEarned0", Value.fromBigInt(value));
  }

  get feesEarned1(): BigInt {
    let value = this.get("feesEarned1");
    return value!.toBigInt();
  }

  set feesEarned1(value: BigInt) {
    this.set("feesEarned1", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get openedAtTimestamp(): BigInt {
    let value = this.get("openedAtTimestamp");
    return value!.toBigInt();
  }

  set openedAtTimestamp(value: BigInt) {
    this.set("openedAtTimestamp", Value.fromBigInt(value));
  }

  get closedAtTimestamp(): BigInt {
    let value = this.get("closedAtTimestamp");
    return value!.toBigInt();
  }

  set closedAtTimestamp(value: BigInt) {
    this.set("closedAtTimestamp", Value.fromBigInt(value));
  }

  get openedATBlock(): BigInt {
    let value = this.get("openedATBlock");
    return value!.toBigInt();
  }

  set openedATBlock(value: BigInt) {
    this.set("openedATBlock", Value.fromBigInt(value));
  }

  get closedAtBlock(): BigInt {
    let value = this.get("closedAtBlock");
    return value!.toBigInt();
  }

  set closedAtBlock(value: BigInt) {
    this.set("closedAtBlock", Value.fromBigInt(value));
  }
}

export class FeeEarned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeEarned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeEarned must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeEarned", id.toString(), this);
    }
  }

  static load(id: string): FeeEarned | null {
    return changetype<FeeEarned | null>(store.get("FeeEarned", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount0(): BigInt | null {
    let value = this.get("amount0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt | null) {
    if (!value) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount1(): BigInt | null {
    let value = this.get("amount1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt | null) {
    if (!value) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get vaultBalances(): Array<Bytes> {
    let value = this.get("vaultBalances");
    return value!.toBytesArray();
  }

  set vaultBalances(value: Array<Bytes>) {
    this.set("vaultBalances", Value.fromBytesArray(value));
  }
}

export class UserVaultBalance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserVaultBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserVaultBalance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserVaultBalance", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UserVaultBalance | null {
    return changetype<UserVaultBalance | null>(
      store.get("UserVaultBalance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get token(): BigInt {
    let value = this.get("token");
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set("token", Value.fromBigInt(value));
  }

  get userIndex(): BigInt {
    let value = this.get("userIndex");
    return value!.toBigInt();
  }

  set userIndex(value: BigInt) {
    this.set("userIndex", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class Swap extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Swap must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get zeroForOne(): boolean {
    let value = this.get("zeroForOne");
    return value!.toBoolean();
  }

  set zeroForOne(value: boolean) {
    this.set("zeroForOne", Value.fromBoolean(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class Mint extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Mint must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mint", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class Burn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Burn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Burn", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Burn | null {
    return changetype<Burn | null>(store.get("Burn", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get burnAmount(): BigInt {
    let value = this.get("burnAmount");
    return value!.toBigInt();
  }

  set burnAmount(value: BigInt) {
    this.set("burnAmount", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value!.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class CollateralSupplied extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollateralSupplied entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralSupplied must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollateralSupplied", id.toString(), this);
    }
  }

  static load(id: string): CollateralSupplied | null {
    return changetype<CollateralSupplied | null>(
      store.get("CollateralSupplied", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get amountSupplied(): BigInt {
    let value = this.get("amountSupplied");
    return value!.toBigInt();
  }

  set amountSupplied(value: BigInt) {
    this.set("amountSupplied", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class CollateralWithdrawn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollateralWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralWithdrawn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollateralWithdrawn", id.toString(), this);
    }
  }

  static load(id: string): CollateralWithdrawn | null {
    return changetype<CollateralWithdrawn | null>(
      store.get("CollateralWithdrawn", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get amountWithdrawn(): BigInt {
    let value = this.get("amountWithdrawn");
    return value!.toBigInt();
  }

  set amountWithdrawn(value: BigInt) {
    this.set("amountWithdrawn", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class GHOMinted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GHOMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GHOMinted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GHOMinted", id.toString(), this);
    }
  }

  static load(id: string): GHOMinted | null {
    return changetype<GHOMinted | null>(store.get("GHOMinted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value!.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class GHOBurned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GHOBurned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GHOBurned must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GHOBurned", id.toString(), this);
    }
  }

  static load(id: string): GHOBurned | null {
    return changetype<GHOBurned | null>(store.get("GHOBurned", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get amountBurned(): BigInt {
    let value = this.get("amountBurned");
    return value!.toBigInt();
  }

  set amountBurned(value: BigInt) {
    this.set("amountBurned", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

export class PoolRepeg extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolRepeg entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolRepeg must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolRepeg", id.toString(), this);
    }
  }

  static load(id: string): PoolRepeg | null {
    return changetype<PoolRepeg | null>(store.get("PoolRepeg", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IFusionXV3Pool__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class IFusionXV3Pool__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class IFusionXV3Pool__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class IFusionXV3Pool__observationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getBlockTimestamp(): BigInt {
    return this.value0;
  }

  getTickCumulative(): BigInt {
    return this.value1;
  }

  getSecondsPerLiquidityCumulativeX128(): BigInt {
    return this.value2;
  }

  getInitialized(): boolean {
    return this.value3;
  }
}

export class IFusionXV3Pool__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  get_liquidity(): BigInt {
    return this.value0;
  }

  getFeeGrowthInside0LastX128(): BigInt {
    return this.value1;
  }

  getFeeGrowthInside1LastX128(): BigInt {
    return this.value2;
  }

  getTokensOwed0(): BigInt {
    return this.value3;
  }

  getTokensOwed1(): BigInt {
    return this.value4;
  }
}

export class IFusionXV3Pool__slot0Result {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getSqrtPriceX96(): BigInt {
    return this.value0;
  }

  getTick(): i32 {
    return this.value1;
  }

  getObservationIndex(): i32 {
    return this.value2;
  }

  getObservationCardinality(): i32 {
    return this.value3;
  }

  getObservationCardinalityNext(): i32 {
    return this.value4;
  }

  getFeeProtocol(): BigInt {
    return this.value5;
  }

  getUnlocked(): boolean {
    return this.value6;
  }
}

export class IFusionXV3Pool__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class IFusionXV3Pool__ticksResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getLiquidityGross(): BigInt {
    return this.value0;
  }

  getLiquidityNet(): BigInt {
    return this.value1;
  }

  getFeeGrowthOutside0X128(): BigInt {
    return this.value2;
  }

  getFeeGrowthOutside1X128(): BigInt {
    return this.value3;
  }

  getTickCumulativeOutside(): BigInt {
    return this.value4;
  }

  getSecondsPerLiquidityOutsideX128(): BigInt {
    return this.value5;
  }

  getSecondsOutside(): BigInt {
    return this.value6;
  }

  getInitialized(): boolean {
    return this.value7;
  }
}

export class IFusionXV3Pool extends ethereum.SmartContract {
  static bind(address: Address): IFusionXV3Pool {
    return new IFusionXV3Pool("IFusionXV3Pool", address);
  }

  burn(
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): IFusionXV3Pool__burnResult {
    let result = super.call(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new IFusionXV3Pool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): ethereum.CallResult<IFusionXV3Pool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): IFusionXV3Pool__collectResult {
    let result = super.call(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );

    return new IFusionXV3Pool__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): ethereum.CallResult<IFusionXV3Pool__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__collectResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): i32 {
    let result = super.call("fee", "fee():(uint24)", []);

    return result[0].toI32();
  }

  try_fee(): ethereum.CallResult<i32> {
    let result = super.tryCall("fee", "fee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeGrowthGlobal0X128(): BigInt {
    let result = super.call(
      "feeGrowthGlobal0X128",
      "feeGrowthGlobal0X128():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeGrowthGlobal0X128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeGrowthGlobal0X128",
      "feeGrowthGlobal0X128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeGrowthGlobal1X128(): BigInt {
    let result = super.call(
      "feeGrowthGlobal1X128",
      "feeGrowthGlobal1X128():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeGrowthGlobal1X128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeGrowthGlobal1X128",
      "feeGrowthGlobal1X128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidity(): BigInt {
    let result = super.call("liquidity", "liquidity():(uint128)", []);

    return result[0].toBigInt();
  }

  try_liquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidity", "liquidity():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidityPerTick(): BigInt {
    let result = super.call(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidityPerTick(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt,
    data: Bytes
  ): IFusionXV3Pool__mintResult {
    let result = super.call(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new IFusionXV3Pool__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mint(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<IFusionXV3Pool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__mintResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  observations(index: BigInt): IFusionXV3Pool__observationsResult {
    let result = super.call(
      "observations",
      "observations(uint256):(uint32,int56,uint160,bool)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new IFusionXV3Pool__observationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_observations(
    index: BigInt
  ): ethereum.CallResult<IFusionXV3Pool__observationsResult> {
    let result = super.tryCall(
      "observations",
      "observations(uint256):(uint32,int56,uint160,bool)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__observationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  positions(key: Bytes): IFusionXV3Pool__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint128,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(key)]
    );

    return new IFusionXV3Pool__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions(
    key: Bytes
  ): ethereum.CallResult<IFusionXV3Pool__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint128,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  slot0(): IFusionXV3Pool__slot0Result {
    let result = super.call(
      "slot0",
      "slot0():(uint160,int24,uint16,uint16,uint16,uint32,bool)",
      []
    );

    return new IFusionXV3Pool__slot0Result(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_slot0(): ethereum.CallResult<IFusionXV3Pool__slot0Result> {
    let result = super.tryCall(
      "slot0",
      "slot0():(uint160,int24,uint16,uint16,uint16,uint32,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__slot0Result(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  swap(
    recipient: Address,
    zeroForOne: boolean,
    amountSpecified: BigInt,
    sqrtPriceLimitX96: BigInt,
    data: Bytes
  ): IFusionXV3Pool__swapResult {
    let result = super.call(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(amountSpecified),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new IFusionXV3Pool__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swap(
    recipient: Address,
    zeroForOne: boolean,
    amountSpecified: BigInt,
    sqrtPriceLimitX96: BigInt,
    data: Bytes
  ): ethereum.CallResult<IFusionXV3Pool__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(amountSpecified),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tickBitmap(wordPosition: i32): BigInt {
    let result = super.call("tickBitmap", "tickBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(wordPosition)
    ]);

    return result[0].toBigInt();
  }

  try_tickBitmap(wordPosition: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tickBitmap", "tickBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(wordPosition)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tickSpacing(): i32 {
    let result = super.call("tickSpacing", "tickSpacing():(int24)", []);

    return result[0].toI32();
  }

  try_tickSpacing(): ethereum.CallResult<i32> {
    let result = super.tryCall("tickSpacing", "tickSpacing():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ticks(tick: i32): IFusionXV3Pool__ticksResult {
    let result = super.call(
      "ticks",
      "ticks(int24):(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)",
      [ethereum.Value.fromI32(tick)]
    );

    return new IFusionXV3Pool__ticksResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_ticks(tick: i32): ethereum.CallResult<IFusionXV3Pool__ticksResult> {
    let result = super.tryCall(
      "ticks",
      "ticks(int24):(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)",
      [ethereum.Value.fromI32(tick)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IFusionXV3Pool__ticksResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tickLower(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickLower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount0Requested(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount1Requested(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FlashCall extends ethereum.Call {
  get inputs(): FlashCall__Inputs {
    return new FlashCall__Inputs(this);
  }

  get outputs(): FlashCall__Outputs {
    return new FlashCall__Outputs(this);
  }
}

export class FlashCall__Inputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashCall__Outputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }
}

export class IncreaseObservationCardinalityNextCall extends ethereum.Call {
  get inputs(): IncreaseObservationCardinalityNextCall__Inputs {
    return new IncreaseObservationCardinalityNextCall__Inputs(this);
  }

  get outputs(): IncreaseObservationCardinalityNextCall__Outputs {
    return new IncreaseObservationCardinalityNextCall__Outputs(this);
  }
}

export class IncreaseObservationCardinalityNextCall__Inputs {
  _call: IncreaseObservationCardinalityNextCall;

  constructor(call: IncreaseObservationCardinalityNextCall) {
    this._call = call;
  }

  get observationCardinalityNext(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class IncreaseObservationCardinalityNextCall__Outputs {
  _call: IncreaseObservationCardinalityNextCall;

  constructor(call: IncreaseObservationCardinalityNextCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sqrtPriceX96(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickLower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountSpecified(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

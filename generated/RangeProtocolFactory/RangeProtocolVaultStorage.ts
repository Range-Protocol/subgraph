// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RangeProtocolVaultStorage extends ethereum.SmartContract {
  static bind(address: Address): RangeProtocolVaultStorage {
    return new RangeProtocolVaultStorage("RangeProtocolVaultStorage", address);
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inThePosition(): boolean {
    let result = super.call("inThePosition", "inThePosition():(bool)", []);

    return result[0].toBoolean();
  }

  try_inThePosition(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inThePosition", "inThePosition():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lowerTick(): i32 {
    let result = super.call("lowerTick", "lowerTick():(int24)", []);

    return result[0].toI32();
  }

  try_lowerTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  managerBalance0(): BigInt {
    let result = super.call(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerBalance1(): BigInt {
    let result = super.call(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerFee(): i32 {
    let result = super.call("managerFee", "managerFee():(uint16)", []);

    return result[0].toI32();
  }

  try_managerFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("managerFee", "managerFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  mintStarted(): boolean {
    let result = super.call("mintStarted", "mintStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintStarted", "mintStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tickSpacing(): i32 {
    let result = super.call("tickSpacing", "tickSpacing():(int24)", []);

    return result[0].toI32();
  }

  try_tickSpacing(): ethereum.CallResult<i32> {
    let result = super.tryCall("tickSpacing", "tickSpacing():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasuryBalance0(): BigInt {
    let result = super.call(
      "treasuryBalance0",
      "treasuryBalance0():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_treasuryBalance0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryBalance0",
      "treasuryBalance0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryBalance1(): BigInt {
    let result = super.call(
      "treasuryBalance1",
      "treasuryBalance1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_treasuryBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryBalance1",
      "treasuryBalance1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upperTick(): i32 {
    let result = super.call("upperTick", "upperTick():(int24)", []);

    return result[0].toI32();
  }

  try_upperTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("upperTick", "upperTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

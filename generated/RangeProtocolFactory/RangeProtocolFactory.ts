// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VaultCreated extends ethereum.Event {
  get params(): VaultCreated__Params {
    return new VaultCreated__Params(this);
  }
}

export class VaultCreated__Params {
  _event: VaultCreated;

  constructor(event: VaultCreated) {
    this._event = event;
  }

  get uniPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VaultImplUpgraded extends ethereum.Event {
  get params(): VaultImplUpgraded__Params {
    return new VaultImplUpgraded__Params(this);
  }
}

export class VaultImplUpgraded__Params {
  _event: VaultImplUpgraded;

  constructor(event: VaultImplUpgraded) {
    this._event = event;
  }

  get uniPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RangeProtocolFactory extends ethereum.SmartContract {
  static bind(address: Address): RangeProtocolFactory {
    return new RangeProtocolFactory("RangeProtocolFactory", address);
  }

  INIT_SELECTOR(): Bytes {
    let result = super.call("INIT_SELECTOR", "INIT_SELECTOR():(bytes4)", []);

    return result[0].toBytes();
  }

  try_INIT_SELECTOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("INIT_SELECTOR", "INIT_SELECTOR():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_SELECTOR(): Bytes {
    let result = super.call(
      "UPGRADE_SELECTOR",
      "UPGRADE_SELECTOR():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_UPGRADE_SELECTOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADE_SELECTOR",
      "UPGRADE_SELECTOR():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultAddresses(startIdx: BigInt, endIdx: BigInt): Array<Address> {
    let result = super.call(
      "getVaultAddresses",
      "getVaultAddresses(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getVaultAddresses(
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getVaultAddresses",
      "getVaultAddresses(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultCount(): BigInt {
    let result = super.call("vaultCount", "vaultCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultCount", "vaultCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _iZiSwapFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get tokenX(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenY(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fee(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get implementation(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeVaultCall extends ethereum.Call {
  get inputs(): UpgradeVaultCall__Inputs {
    return new UpgradeVaultCall__Inputs(this);
  }

  get outputs(): UpgradeVaultCall__Outputs {
    return new UpgradeVaultCall__Outputs(this);
  }
}

export class UpgradeVaultCall__Inputs {
  _call: UpgradeVaultCall;

  constructor(call: UpgradeVaultCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _impl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradeVaultCall__Outputs {
  _call: UpgradeVaultCall;

  constructor(call: UpgradeVaultCall) {
    this._call = call;
  }
}

export class UpgradeVaultsCall extends ethereum.Call {
  get inputs(): UpgradeVaultsCall__Inputs {
    return new UpgradeVaultsCall__Inputs(this);
  }

  get outputs(): UpgradeVaultsCall__Outputs {
    return new UpgradeVaultsCall__Outputs(this);
  }
}

export class UpgradeVaultsCall__Inputs {
  _call: UpgradeVaultsCall;

  constructor(call: UpgradeVaultsCall) {
    this._call = call;
  }

  get _vaults(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _impls(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpgradeVaultsCall__Outputs {
  _call: UpgradeVaultsCall;

  constructor(call: UpgradeVaultsCall) {
    this._call = call;
  }
}

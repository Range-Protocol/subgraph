// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get burnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeesEarned extends ethereum.Event {
  get params(): FeesEarned__Params {
    return new FeesEarned__Params(this);
  }
}

export class FeesEarned__Params {
  _event: FeesEarned;

  constructor(event: FeesEarned) {
    this._event = event;
  }

  get feesEarned0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feesEarned1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InThePositionStatusSet extends ethereum.Event {
  get params(): InThePositionStatusSet__Params {
    return new InThePositionStatusSet__Params(this);
  }
}

export class InThePositionStatusSet__Params {
  _event: InThePositionStatusSet;

  constructor(event: InThePositionStatusSet) {
    this._event = event;
  }

  get inThePosition(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get liquidityMinted(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount0In(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get liquidityRemoved(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get zeroForOne(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TicksSet extends ethereum.Event {
  get params(): TicksSet__Params {
    return new TicksSet__Params(this);
  }
}

export class TicksSet__Params {
  _event: TicksSet;

  constructor(event: TicksSet) {
    this._event = event;
  }

  get lowerTick(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get upperTick(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateManagerParams extends ethereum.Event {
  get params(): UpdateManagerParams__Params {
    return new UpdateManagerParams__Params(this);
  }
}

export class UpdateManagerParams__Params {
  _event: UpdateManagerParams;

  constructor(event: UpdateManagerParams) {
    this._event = event;
  }

  get managerFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get managerTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RangeProtocolVault__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRemainingAmount0(): BigInt {
    return this.value0;
  }

  getRemainingAmount1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getCurrentFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFee0(): BigInt {
    return this.value0;
  }

  getFee1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getMintAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getMintAmount(): BigInt {
    return this.value2;
  }
}

export class RangeProtocolVault__getUnderlyingBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Current(): BigInt {
    return this.value0;
  }

  getAmount1Current(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getUnderlyingBalancesAtPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Current(): BigInt {
    return this.value0;
  }

  getAmount1Current(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault extends ethereum.SmartContract {
  static bind(address: Address): RangeProtocolVault {
    return new RangeProtocolVault("RangeProtocolVault", address);
  }

  MAX_MANAGER_FEE(): i32 {
    let result = super.call(
      "MAX_MANAGER_FEE",
      "MAX_MANAGER_FEE():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_MAX_MANAGER_FEE(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_MANAGER_FEE",
      "MAX_MANAGER_FEE():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  addLiquidity(
    newLowerTick: i32,
    newUpperTick: i32,
    amount0: BigInt,
    amount1: BigInt
  ): RangeProtocolVault__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromI32(newLowerTick),
        ethereum.Value.fromI32(newUpperTick),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );

    return new RangeProtocolVault__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_addLiquidity(
    newLowerTick: i32,
    newUpperTick: i32,
    amount0: BigInt,
    amount1: BigInt
  ): ethereum.CallResult<RangeProtocolVault__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromI32(newLowerTick),
        ethereum.Value.fromI32(newUpperTick),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(burnAmount: BigInt, receiver: Address): RangeProtocolVault__burnResult {
    let result = super.call("burn", "burn(uint256,address):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(burnAmount),
      ethereum.Value.fromAddress(receiver)
    ]);

    return new RangeProtocolVault__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(
    burnAmount: BigInt,
    receiver: Address
  ): ethereum.CallResult<RangeProtocolVault__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__burnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentFees(): RangeProtocolVault__getCurrentFeesResult {
    let result = super.call(
      "getCurrentFees",
      "getCurrentFees():(uint256,uint256)",
      []
    );

    return new RangeProtocolVault__getCurrentFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentFees(): ethereum.CallResult<
    RangeProtocolVault__getCurrentFeesResult
  > {
    let result = super.tryCall(
      "getCurrentFees",
      "getCurrentFees():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getCurrentFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt
  ): RangeProtocolVault__getMintAmountsResult {
    let result = super.call(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max)
      ]
    );

    return new RangeProtocolVault__getMintAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt
  ): ethereum.CallResult<RangeProtocolVault__getMintAmountsResult> {
    let result = super.tryCall(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getMintAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPositionID(): Bytes {
    let result = super.call("getPositionID", "getPositionID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPositionID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionID",
      "getPositionID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlyingBalances(): RangeProtocolVault__getUnderlyingBalancesResult {
    let result = super.call(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );

    return new RangeProtocolVault__getUnderlyingBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalances(): ethereum.CallResult<
    RangeProtocolVault__getUnderlyingBalancesResult
  > {
    let result = super.tryCall(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getUnderlyingBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt
  ): RangeProtocolVault__getUnderlyingBalancesAtPriceResult {
    let result = super.call(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)]
    );

    return new RangeProtocolVault__getUnderlyingBalancesAtPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt
  ): ethereum.CallResult<
    RangeProtocolVault__getUnderlyingBalancesAtPriceResult
  > {
    let result = super.tryCall(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getUnderlyingBalancesAtPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  inThePosition(): boolean {
    let result = super.call("inThePosition", "inThePosition():(bool)", []);

    return result[0].toBoolean();
  }

  try_inThePosition(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inThePosition", "inThePosition():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lowerTick(): i32 {
    let result = super.call("lowerTick", "lowerTick():(int24)", []);

    return result[0].toI32();
  }

  try_lowerTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerBalance0(): BigInt {
    let result = super.call(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerBalance1(): BigInt {
    let result = super.call(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerFee(): i32 {
    let result = super.call("managerFee", "managerFee():(uint16)", []);

    return result[0].toI32();
  }

  try_managerFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("managerFee", "managerFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  managerTreasury(): Address {
    let result = super.call(
      "managerTreasury",
      "managerTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_managerTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "managerTreasury",
      "managerTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mint(mintAmount: BigInt, receiver: Address): RangeProtocolVault__mintResult {
    let result = super.call("mint", "mint(uint256,address):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount),
      ethereum.Value.fromAddress(receiver)
    ]);

    return new RangeProtocolVault__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mint(
    mintAmount: BigInt,
    receiver: Address
  ): ethereum.CallResult<RangeProtocolVault__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swap(
    zeroForOne: boolean,
    swapAmount: BigInt,
    sqrtPriceLimitX96: BigInt
  ): RangeProtocolVault__swapResult {
    let result = super.call(
      "swap",
      "swap(bool,int256,uint160):(int256,int256)",
      [
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(swapAmount),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );

    return new RangeProtocolVault__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swap(
    zeroForOne: boolean,
    swapAmount: BigInt,
    sqrtPriceLimitX96: BigInt
  ): ethereum.CallResult<RangeProtocolVault__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(bool,int256,uint160):(int256,int256)",
      [
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(swapAmount),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__swapResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury0(): BigInt {
    let result = super.call("treasury0", "treasury0():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasury0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("treasury0", "treasury0():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury1(): BigInt {
    let result = super.call("treasury1", "treasury1():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasury1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("treasury1", "treasury1():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryFee(): i32 {
    let result = super.call("treasuryFee", "treasuryFee():(uint16)", []);

    return result[0].toI32();
  }

  try_treasuryFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("treasuryFee", "treasuryFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  upperTick(): i32 {
    let result = super.call("upperTick", "upperTick():(int24)", []);

    return result[0].toI32();
  }

  try_upperTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("upperTick", "upperTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lowerTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _upperTick(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _treasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _manager_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _managerFee(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _name(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get newLowerTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newUpperTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get remainingAmount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get remainingAmount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectManagerCall extends ethereum.Call {
  get inputs(): CollectManagerCall__Inputs {
    return new CollectManagerCall__Inputs(this);
  }

  get outputs(): CollectManagerCall__Outputs {
    return new CollectManagerCall__Outputs(this);
  }
}

export class CollectManagerCall__Inputs {
  _call: CollectManagerCall;

  constructor(call: CollectManagerCall) {
    this._call = call;
  }
}

export class CollectManagerCall__Outputs {
  _call: CollectManagerCall;

  constructor(call: CollectManagerCall) {
    this._call = call;
  }
}

export class CollectTreasuryCall extends ethereum.Call {
  get inputs(): CollectTreasuryCall__Inputs {
    return new CollectTreasuryCall__Inputs(this);
  }

  get outputs(): CollectTreasuryCall__Outputs {
    return new CollectTreasuryCall__Outputs(this);
  }
}

export class CollectTreasuryCall__Inputs {
  _call: CollectTreasuryCall;

  constructor(call: CollectTreasuryCall) {
    this._call = call;
  }
}

export class CollectTreasuryCall__Outputs {
  _call: CollectTreasuryCall;

  constructor(call: CollectTreasuryCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetinThePositionStatusCall extends ethereum.Call {
  get inputs(): SetinThePositionStatusCall__Inputs {
    return new SetinThePositionStatusCall__Inputs(this);
  }

  get outputs(): SetinThePositionStatusCall__Outputs {
    return new SetinThePositionStatusCall__Outputs(this);
  }
}

export class SetinThePositionStatusCall__Inputs {
  _call: SetinThePositionStatusCall;

  constructor(call: SetinThePositionStatusCall) {
    this._call = call;
  }
}

export class SetinThePositionStatusCall__Outputs {
  _call: SetinThePositionStatusCall;

  constructor(call: SetinThePositionStatusCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get swapAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV3MintCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3MintCallbackCall__Inputs {
    return new UniswapV3MintCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3MintCallbackCall__Outputs {
    return new UniswapV3MintCallbackCall__Outputs(this);
  }
}

export class UniswapV3MintCallbackCall__Inputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }

  get amount0Owed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Owed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3MintCallbackCall__Outputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UpdateManagerParamsCall extends ethereum.Call {
  get inputs(): UpdateManagerParamsCall__Inputs {
    return new UpdateManagerParamsCall__Inputs(this);
  }

  get outputs(): UpdateManagerParamsCall__Outputs {
    return new UpdateManagerParamsCall__Outputs(this);
  }
}

export class UpdateManagerParamsCall__Inputs {
  _call: UpdateManagerParamsCall;

  constructor(call: UpdateManagerParamsCall) {
    this._call = call;
  }

  get newManagerFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newManagerTreasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateManagerParamsCall__Outputs {
  _call: UpdateManagerParamsCall;

  constructor(call: UpdateManagerParamsCall) {
    this._call = call;
  }
}

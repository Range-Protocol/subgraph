// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get burnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountXOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountYOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeesEarned extends ethereum.Event {
  get params(): FeesEarned__Params {
    return new FeesEarned__Params(this);
  }
}

export class FeesEarned__Params {
  _event: FeesEarned;

  constructor(event: FeesEarned) {
    this._event = event;
  }

  get feesEarned0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feesEarned1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeesUpdated extends ethereum.Event {
  get params(): FeesUpdated__Params {
    return new FeesUpdated__Params(this);
  }
}

export class FeesUpdated__Params {
  _event: FeesUpdated;

  constructor(event: FeesUpdated) {
    this._event = event;
  }

  get managingFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get performanceFee(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class InThePositionStatusSet extends ethereum.Event {
  get params(): InThePositionStatusSet__Params {
    return new InThePositionStatusSet__Params(this);
  }
}

export class InThePositionStatusSet__Params {
  _event: InThePositionStatusSet;

  constructor(event: InThePositionStatusSet) {
    this._event = event;
  }

  get inThePosition(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get liquidityMinted(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amountXIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountYIn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get liquidityRemoved(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amountXOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountYOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MintStarted extends ethereum.Event {
  get params(): MintStarted__Params {
    return new MintStarted__Params(this);
  }
}

export class MintStarted__Params {
  _event: MintStarted;

  constructor(event: MintStarted) {
    this._event = event;
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountXIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountYIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PointsSet extends ethereum.Event {
  get params(): PointsSet__Params {
    return new PointsSet__Params(this);
  }
}

export class PointsSet__Params {
  _event: PointsSet;

  constructor(event: PointsSet) {
    this._event = event;
  }

  get lowerTick(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get upperTick(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get zeroForOne(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get amountX(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RangeProtocolVault__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRemainingAmountX(): BigInt {
    return this.value0;
  }

  getRemainingAmountY(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getCurrentFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFee0(): BigInt {
    return this.value0;
  }

  getFee1(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getMintAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }

  getMintAmount(): BigInt {
    return this.value2;
  }
}

export class RangeProtocolVault__getUnderlyingBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountXCurrent(): BigInt {
    return this.value0;
  }

  getAmountYCurrent(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getUnderlyingBalancesByShareResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__getUserVaultsResultValue0Struct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get tokenX(): BigInt {
    return this[1].toBigInt();
  }

  get tokenY(): BigInt {
    return this[2].toBigInt();
  }
}

export class RangeProtocolVault__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class RangeProtocolVault__userVaultsResultValue0Struct extends ethereum.Tuple {
  get exists(): boolean {
    return this[0].toBoolean();
  }

  get tokenX(): BigInt {
    return this[1].toBigInt();
  }

  get tokenY(): BigInt {
    return this[2].toBigInt();
  }
}

export class RangeProtocolVault extends ethereum.SmartContract {
  static bind(address: Address): RangeProtocolVault {
    return new RangeProtocolVault("RangeProtocolVault", address);
  }

  addLiquidity(
    newLeftPoint: i32,
    newRightPoint: i32,
    amountX: BigInt,
    amountY: BigInt,
    maxAmounts: Array<BigInt>
  ): RangeProtocolVault__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(int24,int24,uint128,uint128,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromI32(newLeftPoint),
        ethereum.Value.fromI32(newRightPoint),
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromUnsignedBigInt(amountY),
        ethereum.Value.fromUnsignedBigIntArray(maxAmounts)
      ]
    );

    return new RangeProtocolVault__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_addLiquidity(
    newLeftPoint: i32,
    newRightPoint: i32,
    amountX: BigInt,
    amountY: BigInt,
    maxAmounts: Array<BigInt>
  ): ethereum.CallResult<RangeProtocolVault__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(int24,int24,uint128,uint128,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromI32(newLeftPoint),
        ethereum.Value.fromI32(newRightPoint),
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromUnsignedBigInt(amountY),
        ethereum.Value.fromUnsignedBigIntArray(maxAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(
    burnAmount: BigInt,
    minAmounts: Array<BigInt>
  ): RangeProtocolVault__burnResult {
    let result = super.call(
      "burn",
      "burn(uint256,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromUnsignedBigIntArray(minAmounts)
      ]
    );

    return new RangeProtocolVault__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(
    burnAmount: BigInt,
    minAmounts: Array<BigInt>
  ): ethereum.CallResult<RangeProtocolVault__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(uint256,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromUnsignedBigIntArray(minAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__burnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentFees(): RangeProtocolVault__getCurrentFeesResult {
    let result = super.call(
      "getCurrentFees",
      "getCurrentFees():(uint256,uint256)",
      []
    );

    return new RangeProtocolVault__getCurrentFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentFees(): ethereum.CallResult<
    RangeProtocolVault__getCurrentFeesResult
  > {
    let result = super.tryCall(
      "getCurrentFees",
      "getCurrentFees():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getCurrentFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getMintAmounts(
    amountXMax: BigInt,
    amountYMax: BigInt
  ): RangeProtocolVault__getMintAmountsResult {
    let result = super.call(
      "getMintAmounts",
      "getMintAmounts(uint128,uint128):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountXMax),
        ethereum.Value.fromUnsignedBigInt(amountYMax)
      ]
    );

    return new RangeProtocolVault__getMintAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMintAmounts(
    amountXMax: BigInt,
    amountYMax: BigInt
  ): ethereum.CallResult<RangeProtocolVault__getMintAmountsResult> {
    let result = super.tryCall(
      "getMintAmounts",
      "getMintAmounts(uint128,uint128):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountXMax),
        ethereum.Value.fromUnsignedBigInt(amountYMax)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getMintAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPositionID(): Bytes {
    let result = super.call("getPositionID", "getPositionID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPositionID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionID",
      "getPositionID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlyingBalances(): RangeProtocolVault__getUnderlyingBalancesResult {
    let result = super.call(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );

    return new RangeProtocolVault__getUnderlyingBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalances(): ethereum.CallResult<
    RangeProtocolVault__getUnderlyingBalancesResult
  > {
    let result = super.tryCall(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getUnderlyingBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUnderlyingBalancesByShare(
    shares: BigInt
  ): RangeProtocolVault__getUnderlyingBalancesByShareResult {
    let result = super.call(
      "getUnderlyingBalancesByShare",
      "getUnderlyingBalancesByShare(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return new RangeProtocolVault__getUnderlyingBalancesByShareResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalancesByShare(
    shares: BigInt
  ): ethereum.CallResult<
    RangeProtocolVault__getUnderlyingBalancesByShareResult
  > {
    let result = super.tryCall(
      "getUnderlyingBalancesByShare",
      "getUnderlyingBalancesByShare(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__getUnderlyingBalancesByShareResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUserVaults(
    fromIdx: BigInt,
    toIdx: BigInt
  ): Array<RangeProtocolVault__getUserVaultsResultValue0Struct> {
    let result = super.call(
      "getUserVaults",
      "getUserVaults(uint256,uint256):((address,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromIdx),
        ethereum.Value.fromUnsignedBigInt(toIdx)
      ]
    );

    return result[0].toTupleArray<
      RangeProtocolVault__getUserVaultsResultValue0Struct
    >();
  }

  try_getUserVaults(
    fromIdx: BigInt,
    toIdx: BigInt
  ): ethereum.CallResult<
    Array<RangeProtocolVault__getUserVaultsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getUserVaults",
      "getUserVaults(uint256,uint256):((address,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromIdx),
        ethereum.Value.fromUnsignedBigInt(toIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        RangeProtocolVault__getUserVaultsResultValue0Struct
      >()
    );
  }

  inThePosition(): boolean {
    let result = super.call("inThePosition", "inThePosition():(bool)", []);

    return result[0].toBoolean();
  }

  try_inThePosition(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inThePosition", "inThePosition():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  leftPoint(): i32 {
    let result = super.call("leftPoint", "leftPoint():(int24)", []);

    return result[0].toI32();
  }

  try_leftPoint(): ethereum.CallResult<i32> {
    let result = super.tryCall("leftPoint", "leftPoint():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerBalanceX(): BigInt {
    let result = super.call(
      "managerBalanceX",
      "managerBalanceX():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalanceX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalanceX",
      "managerBalanceX():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerBalanceY(): BigInt {
    let result = super.call(
      "managerBalanceY",
      "managerBalanceY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalanceY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalanceY",
      "managerBalanceY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managingFee(): i32 {
    let result = super.call("managingFee", "managingFee():(uint16)", []);

    return result[0].toI32();
  }

  try_managingFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("managingFee", "managingFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  mint(
    mintAmount: BigInt,
    maxAmounts: Array<BigInt>
  ): RangeProtocolVault__mintResult {
    let result = super.call(
      "mint",
      "mint(uint256,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromUnsignedBigIntArray(maxAmounts)
      ]
    );

    return new RangeProtocolVault__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mint(
    mintAmount: BigInt,
    maxAmounts: Array<BigInt>
  ): ethereum.CallResult<RangeProtocolVault__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(uint256,uint256[2]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromUnsignedBigIntArray(maxAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  mintStarted(): boolean {
    let result = super.call("mintStarted", "mintStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintStarted", "mintStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceFee(): i32 {
    let result = super.call("performanceFee", "performanceFee():(uint16)", []);

    return result[0].toI32();
  }

  try_performanceFee(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pointDelta(): i32 {
    let result = super.call("pointDelta", "pointDelta():(int24)", []);

    return result[0].toI32();
  }

  try_pointDelta(): ethereum.CallResult<i32> {
    let result = super.tryCall("pointDelta", "pointDelta():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rightPoint(): i32 {
    let result = super.call("rightPoint", "rightPoint():(int24)", []);

    return result[0].toI32();
  }

  try_rightPoint(): ethereum.CallResult<i32> {
    let result = super.tryCall("rightPoint", "rightPoint():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  swap(
    zeroForOne: boolean,
    swapAmount: BigInt,
    pointLimit: i32,
    minAmountIn: BigInt
  ): RangeProtocolVault__swapResult {
    let result = super.call(
      "swap",
      "swap(bool,uint128,int24,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromUnsignedBigInt(swapAmount),
        ethereum.Value.fromI32(pointLimit),
        ethereum.Value.fromUnsignedBigInt(minAmountIn)
      ]
    );

    return new RangeProtocolVault__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swap(
    zeroForOne: boolean,
    swapAmount: BigInt,
    pointLimit: i32,
    minAmountIn: BigInt
  ): ethereum.CallResult<RangeProtocolVault__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(bool,uint128,int24,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromUnsignedBigInt(swapAmount),
        ethereum.Value.fromI32(pointLimit),
        ethereum.Value.fromUnsignedBigInt(minAmountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolVault__swapResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenX(): Address {
    let result = super.call("tokenX", "tokenX():(address)", []);

    return result[0].toAddress();
  }

  try_tokenX(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenX", "tokenX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenY(): Address {
    let result = super.call("tokenY", "tokenY():(address)", []);

    return result[0].toAddress();
  }

  try_tokenY(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenY", "tokenY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userCount(): BigInt {
    let result = super.call("userCount", "userCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_userCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userCount", "userCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userVaults(user: Address): RangeProtocolVault__userVaultsResultValue0Struct {
    let result = super.call(
      "userVaults",
      "userVaults(address):((bool,uint256,uint256))",
      [ethereum.Value.fromAddress(user)]
    );

    return changetype<RangeProtocolVault__userVaultsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_userVaults(
    user: Address
  ): ethereum.CallResult<RangeProtocolVault__userVaultsResultValue0Struct> {
    let result = super.tryCall(
      "userVaults",
      "userVaults(address):((bool,uint256,uint256))",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RangeProtocolVault__userVaultsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  users(idx: BigInt): Address {
    let result = super.call("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(idx)
    ]);

    return result[0].toAddress();
  }

  try_users(idx: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(idx)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get newLeftPoint(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newRightPoint(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amountX(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxAmounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get remainingAmountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get remainingAmountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class CollectManagerCall extends ethereum.Call {
  get inputs(): CollectManagerCall__Inputs {
    return new CollectManagerCall__Inputs(this);
  }

  get outputs(): CollectManagerCall__Outputs {
    return new CollectManagerCall__Outputs(this);
  }
}

export class CollectManagerCall__Inputs {
  _call: CollectManagerCall;

  constructor(call: CollectManagerCall) {
    this._call = call;
  }
}

export class CollectManagerCall__Outputs {
  _call: CollectManagerCall;

  constructor(call: CollectManagerCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pointDelta(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintDepositCallbackCall extends ethereum.Call {
  get inputs(): MintDepositCallbackCall__Inputs {
    return new MintDepositCallbackCall__Inputs(this);
  }

  get outputs(): MintDepositCallbackCall__Outputs {
    return new MintDepositCallbackCall__Outputs(this);
  }
}

export class MintDepositCallbackCall__Inputs {
  _call: MintDepositCallbackCall;

  constructor(call: MintDepositCallbackCall) {
    this._call = call;
  }

  get tokenXAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenYAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintDepositCallbackCall__Outputs {
  _call: MintDepositCallbackCall;

  constructor(call: MintDepositCallbackCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PullFeeFromPoolCall extends ethereum.Call {
  get inputs(): PullFeeFromPoolCall__Inputs {
    return new PullFeeFromPoolCall__Inputs(this);
  }

  get outputs(): PullFeeFromPoolCall__Outputs {
    return new PullFeeFromPoolCall__Outputs(this);
  }
}

export class PullFeeFromPoolCall__Inputs {
  _call: PullFeeFromPoolCall;

  constructor(call: PullFeeFromPoolCall) {
    this._call = call;
  }
}

export class PullFeeFromPoolCall__Outputs {
  _call: PullFeeFromPoolCall;

  constructor(call: PullFeeFromPoolCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get minAmounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get swapAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pointLimit(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get minAmountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapX2YCallbackCall extends ethereum.Call {
  get inputs(): SwapX2YCallbackCall__Inputs {
    return new SwapX2YCallbackCall__Inputs(this);
  }

  get outputs(): SwapX2YCallbackCall__Outputs {
    return new SwapX2YCallbackCall__Outputs(this);
  }
}

export class SwapX2YCallbackCall__Inputs {
  _call: SwapX2YCallbackCall;

  constructor(call: SwapX2YCallbackCall) {
    this._call = call;
  }

  get tokenXAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapX2YCallbackCall__Outputs {
  _call: SwapX2YCallbackCall;

  constructor(call: SwapX2YCallbackCall) {
    this._call = call;
  }
}

export class SwapY2XCallbackCall extends ethereum.Call {
  get inputs(): SwapY2XCallbackCall__Inputs {
    return new SwapY2XCallbackCall__Inputs(this);
  }

  get outputs(): SwapY2XCallbackCall__Outputs {
    return new SwapY2XCallbackCall__Outputs(this);
  }
}

export class SwapY2XCallbackCall__Inputs {
  _call: SwapY2XCallbackCall;

  constructor(call: SwapY2XCallbackCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenYAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapY2XCallbackCall__Outputs {
  _call: SwapY2XCallbackCall;

  constructor(call: SwapY2XCallbackCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateFeesCall extends ethereum.Call {
  get inputs(): UpdateFeesCall__Inputs {
    return new UpdateFeesCall__Inputs(this);
  }

  get outputs(): UpdateFeesCall__Outputs {
    return new UpdateFeesCall__Outputs(this);
  }
}

export class UpdateFeesCall__Inputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }

  get newManagingFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newPerformanceFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdateFeesCall__Outputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }
}

export class UpdatePointsCall extends ethereum.Call {
  get inputs(): UpdatePointsCall__Inputs {
    return new UpdatePointsCall__Inputs(this);
  }

  get outputs(): UpdatePointsCall__Outputs {
    return new UpdatePointsCall__Outputs(this);
  }
}

export class UpdatePointsCall__Inputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }

  get leftPoint(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get rightPoint(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UpdatePointsCall__Outputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

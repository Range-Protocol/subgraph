// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IiZiSwapPool__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class IiZiSwapPool__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActualAmountX(): BigInt {
    return this.value0;
  }

  getActualAmountY(): BigInt {
    return this.value1;
  }
}

export class IiZiSwapPool__liquidityResultValue0Struct extends ethereum.Tuple {
  get liquidity(): BigInt {
    return this[0].toBigInt();
  }

  get lastFeeScaleX_128(): BigInt {
    return this[1].toBigInt();
  }

  get lastFeeScaleY_128(): BigInt {
    return this[2].toBigInt();
  }

  get tokenOwedX(): BigInt {
    return this[3].toBigInt();
  }

  get tokenOwedY(): BigInt {
    return this[4].toBigInt();
  }
}

export class IiZiSwapPool__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class IiZiSwapPool__pointsResultValue0Struct extends ethereum.Tuple {
  get liquidSum(): BigInt {
    return this[0].toBigInt();
  }

  get liquidDelta(): BigInt {
    return this[1].toBigInt();
  }

  get accFeeXOut_128(): BigInt {
    return this[2].toBigInt();
  }

  get accFeeYOut_128(): BigInt {
    return this[3].toBigInt();
  }

  get isEndpt(): boolean {
    return this[4].toBoolean();
  }
}

export class IiZiSwapPool__stateResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: boolean,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getSqrtPrice_96(): BigInt {
    return this.value0;
  }

  getCurrentPoint(): i32 {
    return this.value1;
  }

  getObservationCurrentIndex(): i32 {
    return this.value2;
  }

  getObservationQueueLen(): i32 {
    return this.value3;
  }

  getObservationNextQueueLen(): i32 {
    return this.value4;
  }

  getLocked(): boolean {
    return this.value5;
  }

  getLiquidity(): BigInt {
    return this.value6;
  }

  getLiquidityX(): BigInt {
    return this.value7;
  }
}

export class IiZiSwapPool__swapX2YResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class IiZiSwapPool__swapY2XResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class IiZiSwapPool extends ethereum.SmartContract {
  static bind(address: Address): IiZiSwapPool {
    return new IiZiSwapPool("IiZiSwapPool", address);
  }

  burn(
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt
  ): IiZiSwapPool__burnResult {
    let result = super.call(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta)
      ]
    );

    return new IiZiSwapPool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt
  ): ethereum.CallResult<IiZiSwapPool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    amountXLim: BigInt,
    amountYLim: BigInt
  ): IiZiSwapPool__collectResult {
    let result = super.call(
      "collect",
      "collect(address,int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(amountXLim),
        ethereum.Value.fromUnsignedBigInt(amountYLim)
      ]
    );

    return new IiZiSwapPool__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    amountXLim: BigInt,
    amountYLim: BigInt
  ): ethereum.CallResult<IiZiSwapPool__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(amountXLim),
        ethereum.Value.fromUnsignedBigInt(amountYLim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  fee(): i32 {
    let result = super.call("fee", "fee():(uint24)", []);

    return result[0].toI32();
  }

  try_fee(): ethereum.CallResult<i32> {
    let result = super.tryCall("fee", "fee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeScaleX_128(): BigInt {
    let result = super.call("feeScaleX_128", "feeScaleX_128():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeScaleX_128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleX_128",
      "feeScaleX_128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeScaleY_128(): BigInt {
    let result = super.call("feeScaleY_128", "feeScaleY_128():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeScaleY_128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleY_128",
      "feeScaleY_128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidity(liquidityId: Bytes): IiZiSwapPool__liquidityResultValue0Struct {
    let result = super.call(
      "liquidity",
      "liquidity(bytes32):((uint128,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(liquidityId)]
    );

    return changetype<IiZiSwapPool__liquidityResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_liquidity(
    liquidityId: Bytes
  ): ethereum.CallResult<IiZiSwapPool__liquidityResultValue0Struct> {
    let result = super.tryCall(
      "liquidity",
      "liquidity(bytes32):((uint128,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(liquidityId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IiZiSwapPool__liquidityResultValue0Struct>(value[0].toTuple())
    );
  }

  mint(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt,
    data: Bytes
  ): IiZiSwapPool__mintResult {
    let result = super.call(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new IiZiSwapPool__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mint(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt,
    data: Bytes
  ): ethereum.CallResult<IiZiSwapPool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__mintResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  pointDelta(): i32 {
    let result = super.call("pointDelta", "pointDelta():(int24)", []);

    return result[0].toI32();
  }

  try_pointDelta(): ethereum.CallResult<i32> {
    let result = super.tryCall("pointDelta", "pointDelta():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  points(point: i32): IiZiSwapPool__pointsResultValue0Struct {
    let result = super.call(
      "points",
      "points(int24):((uint128,int128,uint256,uint256,bool))",
      [ethereum.Value.fromI32(point)]
    );

    return changetype<IiZiSwapPool__pointsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_points(
    point: i32
  ): ethereum.CallResult<IiZiSwapPool__pointsResultValue0Struct> {
    let result = super.tryCall(
      "points",
      "points(int24):((uint128,int128,uint256,uint256,bool))",
      [ethereum.Value.fromI32(point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IiZiSwapPool__pointsResultValue0Struct>(value[0].toTuple())
    );
  }

  sqrtRate_96(): BigInt {
    let result = super.call("sqrtRate_96", "sqrtRate_96():(uint160)", []);

    return result[0].toBigInt();
  }

  try_sqrtRate_96(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sqrtRate_96", "sqrtRate_96():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(): IiZiSwapPool__stateResult {
    let result = super.call(
      "state",
      "state():(uint160,int24,uint16,uint16,uint16,bool,uint128,uint128)",
      []
    );

    return new IiZiSwapPool__stateResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_state(): ethereum.CallResult<IiZiSwapPool__stateResult> {
    let result = super.tryCall(
      "state",
      "state():(uint160,int24,uint16,uint16,uint16,bool,uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__stateResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  swapX2Y(
    recipient: Address,
    amount: BigInt,
    lowPt: i32,
    data: Bytes
  ): IiZiSwapPool__swapX2YResult {
    let result = super.call(
      "swapX2Y",
      "swapX2Y(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new IiZiSwapPool__swapX2YResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapX2Y(
    recipient: Address,
    amount: BigInt,
    lowPt: i32,
    data: Bytes
  ): ethereum.CallResult<IiZiSwapPool__swapX2YResult> {
    let result = super.tryCall(
      "swapX2Y",
      "swapX2Y(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__swapX2YResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapY2X(
    recipient: Address,
    amount: BigInt,
    highPt: i32,
    data: Bytes
  ): IiZiSwapPool__swapY2XResult {
    let result = super.call(
      "swapY2X",
      "swapY2X(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new IiZiSwapPool__swapY2XResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapY2X(
    recipient: Address,
    amount: BigInt,
    highPt: i32,
    data: Bytes
  ): ethereum.CallResult<IiZiSwapPool__swapY2XResult> {
    let result = super.tryCall(
      "swapY2X",
      "swapY2X(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IiZiSwapPool__swapY2XResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tokenX(): Address {
    let result = super.call("tokenX", "tokenX():(address)", []);

    return result[0].toAddress();
  }

  try_tokenX(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenX", "tokenX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenY(): Address {
    let result = super.call("tokenY", "tokenY():(address)", []);

    return result[0].toAddress();
  }

  try_tokenY(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenY", "tokenY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeeXCharged(): BigInt {
    let result = super.call(
      "totalFeeXCharged",
      "totalFeeXCharged():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeXCharged(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeXCharged",
      "totalFeeXCharged():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeYCharged(): BigInt {
    let result = super.call(
      "totalFeeYCharged",
      "totalFeeYCharged():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeYCharged(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeYCharged",
      "totalFeeYCharged():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get leftPt(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get liquidDelta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get leftPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amountXLim(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountYLim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get actualAmountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get actualAmountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get leftPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get liquidDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintDepositCallbackCall extends ethereum.Call {
  get inputs(): MintDepositCallbackCall__Inputs {
    return new MintDepositCallbackCall__Inputs(this);
  }

  get outputs(): MintDepositCallbackCall__Outputs {
    return new MintDepositCallbackCall__Outputs(this);
  }
}

export class MintDepositCallbackCall__Inputs {
  _call: MintDepositCallbackCall;

  constructor(call: MintDepositCallbackCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintDepositCallbackCall__Outputs {
  _call: MintDepositCallbackCall;

  constructor(call: MintDepositCallbackCall) {
    this._call = call;
  }
}

export class SwapX2YCall extends ethereum.Call {
  get inputs(): SwapX2YCall__Inputs {
    return new SwapX2YCall__Inputs(this);
  }

  get outputs(): SwapX2YCall__Outputs {
    return new SwapX2YCall__Outputs(this);
  }
}

export class SwapX2YCall__Inputs {
  _call: SwapX2YCall;

  constructor(call: SwapX2YCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lowPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapX2YCall__Outputs {
  _call: SwapX2YCall;

  constructor(call: SwapX2YCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapX2YCallbackCall extends ethereum.Call {
  get inputs(): SwapX2YCallbackCall__Inputs {
    return new SwapX2YCallbackCall__Inputs(this);
  }

  get outputs(): SwapX2YCallbackCall__Outputs {
    return new SwapX2YCallbackCall__Outputs(this);
  }
}

export class SwapX2YCallbackCall__Inputs {
  _call: SwapX2YCallbackCall;

  constructor(call: SwapX2YCallbackCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapX2YCallbackCall__Outputs {
  _call: SwapX2YCallbackCall;

  constructor(call: SwapX2YCallbackCall) {
    this._call = call;
  }
}

export class SwapY2XCall extends ethereum.Call {
  get inputs(): SwapY2XCall__Inputs {
    return new SwapY2XCall__Inputs(this);
  }

  get outputs(): SwapY2XCall__Outputs {
    return new SwapY2XCall__Outputs(this);
  }
}

export class SwapY2XCall__Inputs {
  _call: SwapY2XCall;

  constructor(call: SwapY2XCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get highPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapY2XCall__Outputs {
  _call: SwapY2XCall;

  constructor(call: SwapY2XCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapY2XCallbackCall extends ethereum.Call {
  get inputs(): SwapY2XCallbackCall__Inputs {
    return new SwapY2XCallbackCall__Inputs(this);
  }

  get outputs(): SwapY2XCallbackCall__Outputs {
    return new SwapY2XCallbackCall__Outputs(this);
  }
}

export class SwapY2XCallbackCall__Inputs {
  _call: SwapY2XCallbackCall;

  constructor(call: SwapY2XCallbackCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapY2XCallbackCall__Outputs {
  _call: SwapY2XCallbackCall;

  constructor(call: SwapY2XCallbackCall) {
    this._call = call;
  }
}

#Vault entity contains properties vault properties being tracked.
type Vault @entity {
  id: Bytes!
  name: String!
  pool: Bytes!
  token0: Bytes!
  token1: Bytes!
  token0Name: String!
  token1Name: String!
  isPassive: Boolean!
  tag: String!
  liquidity: BigInt!
  totalSupply: BigInt!
  manager: Bytes!
  managingFee: BigInt!
  performanceFee: BigInt!
  managerBalance: BigInt!
  balance: BigInt!
  totalFeesEarned0: BigInt!
  totalFeesEarned1: BigInt!
  firstMintAtBlock: BigInt!
  inThePosition: Boolean!
  currentPosition: Position
  currentPositionIdInVault: Bytes
  positionCount: BigInt!
  feeEarnedEventCount: BigInt!
  collateralSuppliedCount: BigInt!
  collateralWithdrawnCount: BigInt!
  ghoMintedCount: BigInt!
  ghoBurnedCount: BigInt!
  poolRepegdCount: BigInt!
  positions: [Position!]! @derivedFrom(field: "vault")
  feeEarnedEvents: [FeeEarned!]! @derivedFrom(field: "vault")
  collateralSupplies: [CollateralSupplied!]! @derivedFrom(field: "vault")
  collateralWithdrawns: [CollateralWithdrawn!]! @derivedFrom(field: "vault")
  ghoMints: [GHOMinted!]! @derivedFrom(field: "vault")
  ghoBurns: [GHOBurned!]! @derivedFrom(field: "vault")
  poolRepegs: [PoolRepeg!]! @derivedFrom(field: "vault")
  mints: [Mint!]! @derivedFrom(field: "vault")
  burns: [Burn!]! @derivedFrom(field: "vault")
  swaps: [Swap!]! @derivedFrom(field: "vault")
  lastUserIndex: BigInt!
  userBalances: [UserVaultBalance!]! @derivedFrom(field: "vault")
}

type Position @entity {
  id: String!
  token0Amount: BigInt!
  token1Amount: BigInt!
  token0Withdrawn: BigInt!
  token1Withdrawn: BigInt!
  priceSqrtAtOpening: BigInt!
  priceSqrtAtClosing: BigInt!
  lowerTick: BigInt!
  upperTick: BigInt!
  feesEarned0: BigInt!
  feesEarned1: BigInt!
  vault: Vault!
  openedAtTimestamp: BigInt!
  closedAtTimestamp: BigInt!
  openedATBlock: BigInt!
  closedAtBlock: BigInt!
}

type FeeEarned @entity {
  id: String!
  amount0: BigInt
  amount1: BigInt
  timestamp: BigInt!
  vault: Vault!
}

# User entity represents users balance across all vaults.
type User @entity {
  id: Bytes!
  vaultBalances: [UserVaultBalance!]! @derivedFrom(field: "user")
}

# UserVaultBalance entity contains user's balance in a given vault.
type UserVaultBalance @entity {
  id: Bytes!
  address: Bytes!
  balance: BigInt!
  token: BigInt!
  userIndex: BigInt!
  user: User!
  vault: Vault!
}

# Swap entity to track swap records
type Swap @entity {
  id: Bytes!
  zeroForOne: Boolean!
  amount0: BigInt!
  amount1: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type Mint @entity {
  id: Bytes!
  receiver: Bytes!
  mintAmount: BigInt!
  amountIn: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type Burn @entity {
  id: Bytes!
  receiver: Bytes!
  burnAmount: BigInt!
  amountOut: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type CollateralSupplied @entity {
  id: String!
  collateralToken: Bytes!
  amountSupplied: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type CollateralWithdrawn @entity {
  id: String!
  collateralToken: Bytes!
  amountWithdrawn: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type GHOMinted @entity {
  id: String!
  collateralToken: Bytes!
  amountMinted: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type GHOBurned @entity {
  id: String!
  collateralToken: Bytes!
  amountBurned: BigInt!
  timestamp: BigInt!
  vault: Vault!
}

type PoolRepeg @entity {
  id: String!
  timestamp: BigInt!
  vault: Vault!
}